
This directory is intended for project header files.

A header file is a file containing C declarations and macro definitions
to be shared between several project source files. You request the use of a
header file in your project source file (C, C++, etc) located in `src` folder
by including it, with the C preprocessing directive `#include'.

このディレクトリは、プロジェクトヘッダーファイル用です。

ヘッダーファイルは、C宣言とマクロ定義を含むファイルです。
複数のプロジェクトソースファイル間で共有されます。 
`src`フォルダーにあるプロジェクトソースファイル（C、C ++など）のヘッダーファイルを、
C前処理ディレクティブ` #include 'を使用してインクルードすることで使用するように要求します。

```src/main.c

#include "header.h"

int main (void)
{
 ...
}
```

Including a header file produces the same results as copying the header file
into each source file that needs it. Such copying would be time-consuming
and error-prone. With a header file, the related declarations appear
in only one place. If they need to be changed, they can be changed in one
place, and programs that include the header file will automatically use the
new version when next recompiled. The header file eliminates the labor of
finding and changing all the copies as well as the risk that a failure to
find one copy will result in inconsistencies within a program.

ヘッダーファイルをインクルードすると、ヘッダーファイルを必要とする各ソースファイルにコピーするのと同じ結果が得られます。 
このようなコピーは時間がかかり、エラーが発生しやすくなります。 
ヘッダーファイルを使用すると、関連する宣言は1か所にのみ表示されます。 
変更が必要な場合は、1か所で変更できます。
ヘッダーファイルを含むプログラムは、次回の再コンパイル時に自動的に新しいバージョンを使用します。 
ヘッダーファイルを使用すると、すべてのコピーを見つけて変更する手間が省け、1つのコピーが見つからないとプログラム内で不整合が発生するリスクがなくなります。

In C, the usual convention is to give header files names that end with `.h'.
It is most portable to use only letters, digits, dashes, and underscores in
header file names, and at most one dot.

Cでは、通常の規則は、ヘッダーファイルに `.h 'で終わる名前を付けることです。 
ヘッダーファイル名に文字、数字、ダッシュ、アンダースコアのみを使用し、最大で1つのドットを使用するのが最も移植性があります。

Read more about using header files in official GCC documentation:

* Include Syntax
* Include Operation
* Once-Only Headers
* Computed Includes

https://gcc.gnu.org/onlinedocs/cpp/Header-Files.html


